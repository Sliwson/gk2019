R""(
	#version 460 core

	struct Material 
	{
		sampler2D diffuse;
		sampler2D specular;
		float shininess;
	};

	struct Light
	{
		vec3 position;
		vec3 color;

		vec3 ambient;
		vec3 diffuse;
		vec3 specular;

		float constant;
		float linear;
		float quadratic;
	};

	out vec4 fragmentColor;

	in vec3 fragmentPosition;
	in vec3 normalVector;
	in vec2 textureCoordinates;

	uniform vec3 viewPosition;
	uniform Material material;
	uniform Light light;

	void main()
	{
		float distance = length(light.position - fragmentPosition);
		float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

		vec3 diffuseColor = vec3(texture(material.diffuse, textureCoordinates));
		vec3 specularColor = vec3(texture(material.specular, textureCoordinates));

		vec3 normal = normalize(normalVector);
		vec3 lightVector = normalize(light.position - fragmentPosition);  
		float diffuseWeight = max(dot(normal, lightVector), 0.0);

		vec3 viewDirection = normalize(viewPosition - fragmentPosition);
		vec3 reflectDirection = reflect(-lightVector, normal);
		float specularWeight = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);

		vec3 ambient = light.ambient * diffuseColor * light.color;
		vec3 diffuse = light.diffuse * diffuseColor * diffuseWeight * light.color;
		vec3 specular = light.specular * specularColor * specularWeight * light.color;

		fragmentColor = vec4((ambient + diffuse + specular) * attenuation, 1.0);
	} 
)""