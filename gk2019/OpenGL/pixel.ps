R""(
	#version 460 core

	struct Material 
	{
		vec3 ambient;
		vec3 diffuse;
		vec3 specular;
		float shininess;
	};

	struct Light
	{
		vec3 position;
		vec3 color;
		vec3 ambient;
		vec3 diffuse;
		vec3 specular;
	};

	out vec4 fragmentColor;

	in vec3 fragmentPosition;
	in vec3 normalVector;
	in vec2 textureCoordinates;

	uniform sampler2D shaderTexture;
	uniform vec3 viewPosition;

	uniform Material material;
	uniform Light light;

	void main()
	{
		vec4 color = texture(shaderTexture, textureCoordinates);

		vec3 normal = normalize(normalVector);
		vec3 lightVector = normalize(light.position - fragmentPosition);  
		float diffuseWeight = max(dot(normal, lightVector), 0.0);

		vec3 viewDirection = normalize(viewPosition - fragmentPosition);
		vec3 reflectDirection = reflect(-lightVector, normal);
		float specularWeight = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);

		vec3 ambient = light.ambient * material.ambient * light.color;
		vec3 diffuse = light.diffuse * material.diffuse * diffuseWeight * light.color;
		vec3 specular = light.specular * material.specular * specularWeight * light.color;

		fragmentColor = vec4((ambient + diffuse + specular), 1.0) * color;
	} 
)""